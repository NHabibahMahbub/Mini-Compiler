Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AUTO
    BREAK
    CASE
    CHAR
    COMMA
    CONST
    CONTINUE
    DEFAULT
    DO
    DOUBLE
    ENUM
    EXTERN
    FOR
    GOTO
    LBRACKET
    LONG
    RBRACKET
    REGISTER
    RETURN
    SHORT
    SIGNED
    SIZEOF
    STATIC
    STRING
    STRUCT
    SWITCH
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLATILE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration SEMICOLON
Rule 5     statement -> assignment SEMICOLON
Rule 6     statement -> print_stmt SEMICOLON
Rule 7     statement -> if_stmt
Rule 8     statement -> while_stmt
Rule 9     statement -> block
Rule 10    block -> LBRACE scope_enter statement_list scope_exit RBRACE
Rule 11    scope_enter -> <empty>
Rule 12    scope_exit -> <empty>
Rule 13    declaration -> type ID
Rule 14    type -> INT
Rule 15    type -> FLOAT
Rule 16    assignment -> ID ASSIGN expression
Rule 17    print_stmt -> PRINT LPAREN expression RPAREN
Rule 18    if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
Rule 19    if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
Rule 20    while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
Rule 21    expression -> expression PLUS expression
Rule 22    expression -> expression MINUS expression
Rule 23    expression -> expression TIMES expression
Rule 24    expression -> expression DIVIDE expression
Rule 25    expression -> expression MOD expression
Rule 26    expression -> expression LT expression
Rule 27    expression -> expression LE expression
Rule 28    expression -> expression GT expression
Rule 29    expression -> expression GE expression
Rule 30    expression -> expression EQ expression
Rule 31    expression -> expression NE expression
Rule 32    expression -> LPAREN expression RPAREN
Rule 33    expression -> NUMBER
Rule 34    expression -> ID

Terminals, with rules where they appear

ASSIGN               : 16
AUTO                 : 
BREAK                : 
CASE                 : 
CHAR                 : 
COMMA                : 
CONST                : 
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 24
DO                   : 
DOUBLE               : 
ELSE                 : 19
ENUM                 : 
EQ                   : 30
EXTERN               : 
FLOAT                : 15
FOR                  : 
GE                   : 29
GOTO                 : 
GT                   : 28
ID                   : 13 16 34
IF                   : 18 19
INT                  : 14
LBRACE               : 10 18 19 19 20
LBRACKET             : 
LE                   : 27
LONG                 : 
LPAREN               : 17 18 19 20 32
LT                   : 26
MINUS                : 22
MOD                  : 25
NE                   : 31
NUMBER               : 33
PLUS                 : 21
PRINT                : 17
RBRACE               : 10 18 19 19 20
RBRACKET             : 
REGISTER             : 
RETURN               : 
RPAREN               : 17 18 19 20 32
SEMICOLON            : 4 5 6
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRING               : 
STRUCT               : 
SWITCH               : 
TIMES                : 23
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

assignment           : 5
block                : 9
declaration          : 4
expression           : 16 17 18 19 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32
if_stmt              : 7
print_stmt           : 6
program              : 0
scope_enter          : 10 18 19 19 20
scope_exit           : 10 18 19 19 20
statement            : 2 3
statement_list       : 1 3 10 18 19 19 20
type                 : 13
while_stmt           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 3

    (2) statement_list -> statement .

    ID              reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement .)
    INT             reduce using rule 2 (statement_list -> statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 19


state 5

    (5) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 20


state 6

    (6) statement -> print_stmt . SEMICOLON

    SEMICOLON       shift and go to state 21


state 7

    (7) statement -> if_stmt .

    ID              reduce using rule 7 (statement -> if_stmt .)
    PRINT           reduce using rule 7 (statement -> if_stmt .)
    IF              reduce using rule 7 (statement -> if_stmt .)
    WHILE           reduce using rule 7 (statement -> if_stmt .)
    LBRACE          reduce using rule 7 (statement -> if_stmt .)
    INT             reduce using rule 7 (statement -> if_stmt .)
    FLOAT           reduce using rule 7 (statement -> if_stmt .)
    $end            reduce using rule 7 (statement -> if_stmt .)
    RBRACE          reduce using rule 7 (statement -> if_stmt .)


state 8

    (8) statement -> while_stmt .

    ID              reduce using rule 8 (statement -> while_stmt .)
    PRINT           reduce using rule 8 (statement -> while_stmt .)
    IF              reduce using rule 8 (statement -> while_stmt .)
    WHILE           reduce using rule 8 (statement -> while_stmt .)
    LBRACE          reduce using rule 8 (statement -> while_stmt .)
    INT             reduce using rule 8 (statement -> while_stmt .)
    FLOAT           reduce using rule 8 (statement -> while_stmt .)
    $end            reduce using rule 8 (statement -> while_stmt .)
    RBRACE          reduce using rule 8 (statement -> while_stmt .)


state 9

    (9) statement -> block .

    ID              reduce using rule 9 (statement -> block .)
    PRINT           reduce using rule 9 (statement -> block .)
    IF              reduce using rule 9 (statement -> block .)
    WHILE           reduce using rule 9 (statement -> block .)
    LBRACE          reduce using rule 9 (statement -> block .)
    INT             reduce using rule 9 (statement -> block .)
    FLOAT           reduce using rule 9 (statement -> block .)
    $end            reduce using rule 9 (statement -> block .)
    RBRACE          reduce using rule 9 (statement -> block .)


state 10

    (13) declaration -> type . ID

    ID              shift and go to state 22


state 11

    (16) assignment -> ID . ASSIGN expression

    ASSIGN          shift and go to state 23


state 12

    (17) print_stmt -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 24


state 13

    (18) if_stmt -> IF . LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> IF . LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE

    LPAREN          shift and go to state 25


state 14

    (10) block -> LBRACE . scope_enter statement_list scope_exit RBRACE
    (11) scope_enter -> .

    ID              reduce using rule 11 (scope_enter -> .)
    PRINT           reduce using rule 11 (scope_enter -> .)
    IF              reduce using rule 11 (scope_enter -> .)
    WHILE           reduce using rule 11 (scope_enter -> .)
    LBRACE          reduce using rule 11 (scope_enter -> .)
    INT             reduce using rule 11 (scope_enter -> .)
    FLOAT           reduce using rule 11 (scope_enter -> .)

    scope_enter                    shift and go to state 26

state 15

    (20) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE

    LPAREN          shift and go to state 27


state 16

    (14) type -> INT .

    ID              reduce using rule 14 (type -> INT .)


state 17

    (15) type -> FLOAT .

    ID              reduce using rule 15 (type -> FLOAT .)


state 18

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 19

    (4) statement -> declaration SEMICOLON .

    ID              reduce using rule 4 (statement -> declaration SEMICOLON .)
    PRINT           reduce using rule 4 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 4 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 4 (statement -> declaration SEMICOLON .)
    LBRACE          reduce using rule 4 (statement -> declaration SEMICOLON .)
    INT             reduce using rule 4 (statement -> declaration SEMICOLON .)
    FLOAT           reduce using rule 4 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 4 (statement -> declaration SEMICOLON .)
    RBRACE          reduce using rule 4 (statement -> declaration SEMICOLON .)


state 20

    (5) statement -> assignment SEMICOLON .

    ID              reduce using rule 5 (statement -> assignment SEMICOLON .)
    PRINT           reduce using rule 5 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 5 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 5 (statement -> assignment SEMICOLON .)
    LBRACE          reduce using rule 5 (statement -> assignment SEMICOLON .)
    INT             reduce using rule 5 (statement -> assignment SEMICOLON .)
    FLOAT           reduce using rule 5 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 5 (statement -> assignment SEMICOLON .)
    RBRACE          reduce using rule 5 (statement -> assignment SEMICOLON .)


state 21

    (6) statement -> print_stmt SEMICOLON .

    ID              reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    PRINT           reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    IF              reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    WHILE           reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    LBRACE          reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    INT             reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    FLOAT           reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    $end            reduce using rule 6 (statement -> print_stmt SEMICOLON .)
    RBRACE          reduce using rule 6 (statement -> print_stmt SEMICOLON .)


state 22

    (13) declaration -> type ID .

    SEMICOLON       reduce using rule 13 (declaration -> type ID .)


state 23

    (16) assignment -> ID ASSIGN . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 29

state 24

    (17) print_stmt -> PRINT LPAREN . expression RPAREN
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 32

state 25

    (18) if_stmt -> IF LPAREN . expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> IF LPAREN . expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 33

state 26

    (10) block -> LBRACE scope_enter . statement_list scope_exit RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    statement_list                 shift and go to state 34
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 27

    (20) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 35

state 28

    (34) expression -> ID .

    PLUS            reduce using rule 34 (expression -> ID .)
    MINUS           reduce using rule 34 (expression -> ID .)
    TIMES           reduce using rule 34 (expression -> ID .)
    DIVIDE          reduce using rule 34 (expression -> ID .)
    MOD             reduce using rule 34 (expression -> ID .)
    LT              reduce using rule 34 (expression -> ID .)
    LE              reduce using rule 34 (expression -> ID .)
    GT              reduce using rule 34 (expression -> ID .)
    GE              reduce using rule 34 (expression -> ID .)
    EQ              reduce using rule 34 (expression -> ID .)
    NE              reduce using rule 34 (expression -> ID .)
    SEMICOLON       reduce using rule 34 (expression -> ID .)
    RPAREN          reduce using rule 34 (expression -> ID .)


state 29

    (16) assignment -> ID ASSIGN expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    SEMICOLON       reduce using rule 16 (assignment -> ID ASSIGN expression .)
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46


state 30

    (32) expression -> LPAREN . expression RPAREN
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 47

state 31

    (33) expression -> NUMBER .

    PLUS            reduce using rule 33 (expression -> NUMBER .)
    MINUS           reduce using rule 33 (expression -> NUMBER .)
    TIMES           reduce using rule 33 (expression -> NUMBER .)
    DIVIDE          reduce using rule 33 (expression -> NUMBER .)
    MOD             reduce using rule 33 (expression -> NUMBER .)
    LT              reduce using rule 33 (expression -> NUMBER .)
    LE              reduce using rule 33 (expression -> NUMBER .)
    GT              reduce using rule 33 (expression -> NUMBER .)
    GE              reduce using rule 33 (expression -> NUMBER .)
    EQ              reduce using rule 33 (expression -> NUMBER .)
    NE              reduce using rule 33 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 33 (expression -> NUMBER .)
    RPAREN          reduce using rule 33 (expression -> NUMBER .)


state 32

    (17) print_stmt -> PRINT LPAREN expression . RPAREN
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    RPAREN          shift and go to state 48
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46


state 33

    (18) if_stmt -> IF LPAREN expression . RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> IF LPAREN expression . RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    RPAREN          shift and go to state 49
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46


state 34

    (10) block -> LBRACE scope_enter statement_list . scope_exit RBRACE
    (3) statement_list -> statement_list . statement
    (12) scope_exit -> .
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    RBRACE          reduce using rule 12 (scope_exit -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    scope_exit                     shift and go to state 50
    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 35

    (20) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    RPAREN          shift and go to state 51
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46


state 36

    (21) expression -> expression PLUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 52

state 37

    (22) expression -> expression MINUS . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 53

state 38

    (23) expression -> expression TIMES . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 54

state 39

    (24) expression -> expression DIVIDE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 55

state 40

    (25) expression -> expression MOD . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 56

state 41

    (26) expression -> expression LT . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 57

state 42

    (27) expression -> expression LE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 58

state 43

    (28) expression -> expression GT . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 59

state 44

    (29) expression -> expression GE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 60

state 45

    (30) expression -> expression EQ . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 61

state 46

    (31) expression -> expression NE . expression
    (21) expression -> . expression PLUS expression
    (22) expression -> . expression MINUS expression
    (23) expression -> . expression TIMES expression
    (24) expression -> . expression DIVIDE expression
    (25) expression -> . expression MOD expression
    (26) expression -> . expression LT expression
    (27) expression -> . expression LE expression
    (28) expression -> . expression GT expression
    (29) expression -> . expression GE expression
    (30) expression -> . expression EQ expression
    (31) expression -> . expression NE expression
    (32) expression -> . LPAREN expression RPAREN
    (33) expression -> . NUMBER
    (34) expression -> . ID

    LPAREN          shift and go to state 30
    NUMBER          shift and go to state 31
    ID              shift and go to state 28

    expression                     shift and go to state 62

state 47

    (32) expression -> LPAREN expression . RPAREN
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46


state 48

    (17) print_stmt -> PRINT LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 17 (print_stmt -> PRINT LPAREN expression RPAREN .)


state 49

    (18) if_stmt -> IF LPAREN expression RPAREN . LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> IF LPAREN expression RPAREN . LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE

    LBRACE          shift and go to state 64


state 50

    (10) block -> LBRACE scope_enter statement_list scope_exit . RBRACE

    RBRACE          shift and go to state 65


state 51

    (20) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE scope_enter statement_list scope_exit RBRACE

    LBRACE          shift and go to state 66


state 52

    (21) expression -> expression PLUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 21 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 21 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 21 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 21 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46

  ! TIMES           [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! NE              [ reduce using rule 21 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]


state 53

    (22) expression -> expression MINUS expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 22 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 22 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 22 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 22 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 38
    DIVIDE          shift and go to state 39
    MOD             shift and go to state 40
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46

  ! TIMES           [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! NE              [ reduce using rule 22 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]


state 54

    (23) expression -> expression TIMES expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 23 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 23 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 23 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 23 (expression -> expression TIMES expression .)
    MOD             reduce using rule 23 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 23 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 23 (expression -> expression TIMES expression .)
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46

  ! LT              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! NE              [ reduce using rule 23 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]


state 55

    (24) expression -> expression DIVIDE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 24 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 24 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 24 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 24 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 24 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 24 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 24 (expression -> expression DIVIDE expression .)
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46

  ! LT              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! NE              [ reduce using rule 24 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]


state 56

    (25) expression -> expression MOD expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 25 (expression -> expression MOD expression .)
    MINUS           reduce using rule 25 (expression -> expression MOD expression .)
    TIMES           reduce using rule 25 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 25 (expression -> expression MOD expression .)
    MOD             reduce using rule 25 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 25 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 25 (expression -> expression MOD expression .)
    LT              shift and go to state 41
    LE              shift and go to state 42
    GT              shift and go to state 43
    GE              shift and go to state 44
    EQ              shift and go to state 45
    NE              shift and go to state 46

  ! LT              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! LE              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! GT              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! GE              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! EQ              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! NE              [ reduce using rule 25 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]


state 57

    (26) expression -> expression LT expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 26 (expression -> expression LT expression .)
    MINUS           reduce using rule 26 (expression -> expression LT expression .)
    TIMES           reduce using rule 26 (expression -> expression LT expression .)
    DIVIDE          reduce using rule 26 (expression -> expression LT expression .)
    MOD             reduce using rule 26 (expression -> expression LT expression .)
    LT              reduce using rule 26 (expression -> expression LT expression .)
    LE              reduce using rule 26 (expression -> expression LT expression .)
    GT              reduce using rule 26 (expression -> expression LT expression .)
    GE              reduce using rule 26 (expression -> expression LT expression .)
    EQ              reduce using rule 26 (expression -> expression LT expression .)
    NE              reduce using rule 26 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 26 (expression -> expression LT expression .)
    RPAREN          reduce using rule 26 (expression -> expression LT expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 58

    (27) expression -> expression LE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 27 (expression -> expression LE expression .)
    MINUS           reduce using rule 27 (expression -> expression LE expression .)
    TIMES           reduce using rule 27 (expression -> expression LE expression .)
    DIVIDE          reduce using rule 27 (expression -> expression LE expression .)
    MOD             reduce using rule 27 (expression -> expression LE expression .)
    LT              reduce using rule 27 (expression -> expression LE expression .)
    LE              reduce using rule 27 (expression -> expression LE expression .)
    GT              reduce using rule 27 (expression -> expression LE expression .)
    GE              reduce using rule 27 (expression -> expression LE expression .)
    EQ              reduce using rule 27 (expression -> expression LE expression .)
    NE              reduce using rule 27 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression LE expression .)
    RPAREN          reduce using rule 27 (expression -> expression LE expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 59

    (28) expression -> expression GT expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 28 (expression -> expression GT expression .)
    MINUS           reduce using rule 28 (expression -> expression GT expression .)
    TIMES           reduce using rule 28 (expression -> expression GT expression .)
    DIVIDE          reduce using rule 28 (expression -> expression GT expression .)
    MOD             reduce using rule 28 (expression -> expression GT expression .)
    LT              reduce using rule 28 (expression -> expression GT expression .)
    LE              reduce using rule 28 (expression -> expression GT expression .)
    GT              reduce using rule 28 (expression -> expression GT expression .)
    GE              reduce using rule 28 (expression -> expression GT expression .)
    EQ              reduce using rule 28 (expression -> expression GT expression .)
    NE              reduce using rule 28 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 28 (expression -> expression GT expression .)
    RPAREN          reduce using rule 28 (expression -> expression GT expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 60

    (29) expression -> expression GE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 29 (expression -> expression GE expression .)
    MINUS           reduce using rule 29 (expression -> expression GE expression .)
    TIMES           reduce using rule 29 (expression -> expression GE expression .)
    DIVIDE          reduce using rule 29 (expression -> expression GE expression .)
    MOD             reduce using rule 29 (expression -> expression GE expression .)
    LT              reduce using rule 29 (expression -> expression GE expression .)
    LE              reduce using rule 29 (expression -> expression GE expression .)
    GT              reduce using rule 29 (expression -> expression GE expression .)
    GE              reduce using rule 29 (expression -> expression GE expression .)
    EQ              reduce using rule 29 (expression -> expression GE expression .)
    NE              reduce using rule 29 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 29 (expression -> expression GE expression .)
    RPAREN          reduce using rule 29 (expression -> expression GE expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 61

    (30) expression -> expression EQ expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 30 (expression -> expression EQ expression .)
    MINUS           reduce using rule 30 (expression -> expression EQ expression .)
    TIMES           reduce using rule 30 (expression -> expression EQ expression .)
    DIVIDE          reduce using rule 30 (expression -> expression EQ expression .)
    MOD             reduce using rule 30 (expression -> expression EQ expression .)
    LT              reduce using rule 30 (expression -> expression EQ expression .)
    LE              reduce using rule 30 (expression -> expression EQ expression .)
    GT              reduce using rule 30 (expression -> expression EQ expression .)
    GE              reduce using rule 30 (expression -> expression EQ expression .)
    EQ              reduce using rule 30 (expression -> expression EQ expression .)
    NE              reduce using rule 30 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 30 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 30 (expression -> expression EQ expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 62

    (31) expression -> expression NE expression .
    (21) expression -> expression . PLUS expression
    (22) expression -> expression . MINUS expression
    (23) expression -> expression . TIMES expression
    (24) expression -> expression . DIVIDE expression
    (25) expression -> expression . MOD expression
    (26) expression -> expression . LT expression
    (27) expression -> expression . LE expression
    (28) expression -> expression . GT expression
    (29) expression -> expression . GE expression
    (30) expression -> expression . EQ expression
    (31) expression -> expression . NE expression

    PLUS            reduce using rule 31 (expression -> expression NE expression .)
    MINUS           reduce using rule 31 (expression -> expression NE expression .)
    TIMES           reduce using rule 31 (expression -> expression NE expression .)
    DIVIDE          reduce using rule 31 (expression -> expression NE expression .)
    MOD             reduce using rule 31 (expression -> expression NE expression .)
    LT              reduce using rule 31 (expression -> expression NE expression .)
    LE              reduce using rule 31 (expression -> expression NE expression .)
    GT              reduce using rule 31 (expression -> expression NE expression .)
    GE              reduce using rule 31 (expression -> expression NE expression .)
    EQ              reduce using rule 31 (expression -> expression NE expression .)
    NE              reduce using rule 31 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 31 (expression -> expression NE expression .)
    RPAREN          reduce using rule 31 (expression -> expression NE expression .)

  ! PLUS            [ shift and go to state 36 ]
  ! MINUS           [ shift and go to state 37 ]
  ! TIMES           [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! MOD             [ shift and go to state 40 ]
  ! LT              [ shift and go to state 41 ]
  ! LE              [ shift and go to state 42 ]
  ! GT              [ shift and go to state 43 ]
  ! GE              [ shift and go to state 44 ]
  ! EQ              [ shift and go to state 45 ]
  ! NE              [ shift and go to state 46 ]


state 63

    (32) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 32 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 32 (expression -> LPAREN expression RPAREN .)


state 64

    (18) if_stmt -> IF LPAREN expression RPAREN LBRACE . scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE . scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (11) scope_enter -> .

    ID              reduce using rule 11 (scope_enter -> .)
    PRINT           reduce using rule 11 (scope_enter -> .)
    IF              reduce using rule 11 (scope_enter -> .)
    WHILE           reduce using rule 11 (scope_enter -> .)
    LBRACE          reduce using rule 11 (scope_enter -> .)
    INT             reduce using rule 11 (scope_enter -> .)
    FLOAT           reduce using rule 11 (scope_enter -> .)

    scope_enter                    shift and go to state 67

state 65

    (10) block -> LBRACE scope_enter statement_list scope_exit RBRACE .

    ID              reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    PRINT           reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    IF              reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    WHILE           reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    LBRACE          reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    INT             reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    FLOAT           reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    $end            reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)
    RBRACE          reduce using rule 10 (block -> LBRACE scope_enter statement_list scope_exit RBRACE .)


state 66

    (20) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . scope_enter statement_list scope_exit RBRACE
    (11) scope_enter -> .

    ID              reduce using rule 11 (scope_enter -> .)
    PRINT           reduce using rule 11 (scope_enter -> .)
    IF              reduce using rule 11 (scope_enter -> .)
    WHILE           reduce using rule 11 (scope_enter -> .)
    LBRACE          reduce using rule 11 (scope_enter -> .)
    INT             reduce using rule 11 (scope_enter -> .)
    FLOAT           reduce using rule 11 (scope_enter -> .)

    scope_enter                    shift and go to state 68

state 67

    (18) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter . statement_list scope_exit RBRACE
    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter . statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    statement_list                 shift and go to state 69
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 68

    (20) while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter . statement_list scope_exit RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    statement_list                 shift and go to state 70
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 69

    (18) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list . scope_exit RBRACE
    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list . scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (3) statement_list -> statement_list . statement
    (12) scope_exit -> .
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    RBRACE          reduce using rule 12 (scope_exit -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    scope_exit                     shift and go to state 71
    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 70

    (20) while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list . scope_exit RBRACE
    (3) statement_list -> statement_list . statement
    (12) scope_exit -> .
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    RBRACE          reduce using rule 12 (scope_exit -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    scope_exit                     shift and go to state 72
    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 71

    (18) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit . RBRACE
    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit . RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE

    RBRACE          shift and go to state 73


state 72

    (20) while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit . RBRACE

    RBRACE          shift and go to state 74


state 73

    (18) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .
    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE . ELSE LBRACE scope_enter statement_list scope_exit RBRACE

    ID              reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    PRINT           reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    IF              reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    WHILE           reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    LBRACE          reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    INT             reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    FLOAT           reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    $end            reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    RBRACE          reduce using rule 18 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    ELSE            shift and go to state 75


state 74

    (20) while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .

    ID              reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    PRINT           reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    IF              reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    WHILE           reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    LBRACE          reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    INT             reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    FLOAT           reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    $end            reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)
    RBRACE          reduce using rule 20 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE .)


state 75

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE . LBRACE scope_enter statement_list scope_exit RBRACE

    LBRACE          shift and go to state 76


state 76

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE . scope_enter statement_list scope_exit RBRACE
    (11) scope_enter -> .

    ID              reduce using rule 11 (scope_enter -> .)
    PRINT           reduce using rule 11 (scope_enter -> .)
    IF              reduce using rule 11 (scope_enter -> .)
    WHILE           reduce using rule 11 (scope_enter -> .)
    LBRACE          reduce using rule 11 (scope_enter -> .)
    INT             reduce using rule 11 (scope_enter -> .)
    FLOAT           reduce using rule 11 (scope_enter -> .)

    scope_enter                    shift and go to state 77

state 77

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter . statement_list scope_exit RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    statement_list                 shift and go to state 78
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 78

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list . scope_exit RBRACE
    (3) statement_list -> statement_list . statement
    (12) scope_exit -> .
    (4) statement -> . declaration SEMICOLON
    (5) statement -> . assignment SEMICOLON
    (6) statement -> . print_stmt SEMICOLON
    (7) statement -> . if_stmt
    (8) statement -> . while_stmt
    (9) statement -> . block
    (13) declaration -> . type ID
    (16) assignment -> . ID ASSIGN expression
    (17) print_stmt -> . PRINT LPAREN expression RPAREN
    (18) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (19) if_stmt -> . IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE
    (20) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE
    (10) block -> . LBRACE scope_enter statement_list scope_exit RBRACE
    (14) type -> . INT
    (15) type -> . FLOAT

    RBRACE          reduce using rule 12 (scope_exit -> .)
    ID              shift and go to state 11
    PRINT           shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 15
    LBRACE          shift and go to state 14
    INT             shift and go to state 16
    FLOAT           shift and go to state 17

    scope_exit                     shift and go to state 79
    statement                      shift and go to state 18
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_stmt                     shift and go to state 6
    if_stmt                        shift and go to state 7
    while_stmt                     shift and go to state 8
    block                          shift and go to state 9
    type                           shift and go to state 10

state 79

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit . RBRACE

    RBRACE          shift and go to state 80


state 80

    (19) if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .

    ID              reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    PRINT           reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    IF              reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    WHILE           reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    LBRACE          reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    INT             reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    FLOAT           reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    $end            reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)
    RBRACE          reduce using rule 19 (if_stmt -> IF LPAREN expression RPAREN LBRACE scope_enter statement_list scope_exit RBRACE ELSE LBRACE scope_enter statement_list scope_exit RBRACE .)

