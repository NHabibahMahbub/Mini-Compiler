
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftTIMESDIVIDEMODnonassocLTLEGTGEEQNEASSIGN AUTO BREAK CASE CHAR COMMA CONST CONTINUE DEFAULT DIVIDE DO DOUBLE ELSE ENUM EQ EXTERN FLOAT FOR GE GOTO GT ID IF INT LBRACE LBRACKET LE LONG LPAREN LT MINUS MOD NE NUMBER PLUS PRINT RBRACE RBRACKET REGISTER RETURN RPAREN SEMICOLON SHORT SIGNED SIZEOF STATIC STRING STRUCT SWITCH TIMES TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : statement_liststatement_list : statement\n                          | statement_list statementstatement : declaration SEMICOLON\n                     | assignment SEMICOLON\n                     | print_stmt SEMICOLON\n                     | if_stmt\n                     | while_stmt\n                     | blockblock : LBRACE scope_enter statement_list scope_exit RBRACEscope_enter :scope_exit :declaration : type IDtype : INT\n                | FLOATassignment : ID ASSIGN expressionprint_stmt : PRINT LPAREN expression RPARENif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionexpression : expression LT expression\n                      | expression LE expression\n                      | expression GT expression\n                      | expression GE expression\n                      | expression EQ expression\n                      | expression NE expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID'
    
_lr_action_items = {'ID':([0,2,3,7,8,9,10,15,16,17,18,19,20,21,23,24,25,26,27,30,35,36,37,38,39,40,41,42,43,44,45,46,49,50,64,65,66,67,68,],[11,11,-2,-7,-8,-9,22,-11,-14,-15,-3,-4,-5,-6,28,28,28,28,11,28,11,28,28,28,28,28,28,28,28,28,28,28,11,11,-18,-20,-10,11,-19,]),'PRINT':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[12,12,-2,-7,-8,-9,-11,-3,-4,-5,-6,12,12,12,12,-18,-20,-10,12,-19,]),'IF':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[13,13,-2,-7,-8,-9,-11,-3,-4,-5,-6,13,13,13,13,-18,-20,-10,13,-19,]),'WHILE':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[14,14,-2,-7,-8,-9,-11,-3,-4,-5,-6,14,14,14,14,-18,-20,-10,14,-19,]),'LBRACE':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[15,15,-2,-7,-8,-9,-11,-3,-4,-5,-6,15,15,15,15,-18,-20,-10,15,-19,]),'INT':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[16,16,-2,-7,-8,-9,-11,-3,-4,-5,-6,16,16,16,16,-18,-20,-10,16,-19,]),'FLOAT':([0,2,3,7,8,9,15,18,19,20,21,27,35,49,50,64,65,66,67,68,],[17,17,-2,-7,-8,-9,-11,-3,-4,-5,-6,17,17,17,17,-18,-20,-10,17,-19,]),'$end':([1,2,3,7,8,9,18,19,20,21,64,65,66,68,],[0,-1,-2,-7,-8,-9,-3,-4,-5,-6,-18,-20,-10,-19,]),'RBRACE':([3,7,8,9,18,19,20,21,35,51,64,65,66,68,],[-2,-7,-8,-9,-3,-4,-5,-6,-12,66,-18,-20,-10,-19,]),'SEMICOLON':([4,5,6,22,28,29,31,48,52,53,54,55,56,57,58,59,60,61,62,63,],[19,20,21,-13,-34,-16,-33,-17,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'ELSE':([7,8,9,19,20,21,64,65,66,68,],[-7,-8,-9,-4,-5,-6,67,-20,-10,-19,]),'ASSIGN':([11,],[23,]),'LPAREN':([12,13,14,23,24,25,26,30,36,37,38,39,40,41,42,43,44,45,46,],[24,25,26,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'NUMBER':([23,24,25,26,30,36,37,38,39,40,41,42,43,44,45,46,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'PLUS':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,36,-33,36,36,36,36,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'MINUS':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,37,-33,37,37,37,37,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'TIMES':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,38,-33,38,38,38,38,38,38,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'DIVIDE':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,39,-33,39,39,39,39,39,39,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'MOD':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,40,-33,40,40,40,40,40,40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),'LT':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,41,-33,41,41,41,41,41,41,41,41,41,None,None,None,None,None,None,-32,]),'LE':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,42,-33,42,42,42,42,42,42,42,42,42,None,None,None,None,None,None,-32,]),'GT':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,43,-33,43,43,43,43,43,43,43,43,43,None,None,None,None,None,None,-32,]),'GE':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,44,-33,44,44,44,44,44,44,44,44,44,None,None,None,None,None,None,-32,]),'EQ':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,45,-33,45,45,45,45,45,45,45,45,45,None,None,None,None,None,None,-32,]),'NE':([28,29,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,46,-33,46,46,46,46,46,46,46,46,46,None,None,None,None,None,None,-32,]),'RPAREN':([28,31,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,63,],[-34,-33,48,49,50,63,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,27,],[2,35,]),'statement':([0,2,27,35,49,50,67,],[3,18,3,18,64,65,68,]),'declaration':([0,2,27,35,49,50,67,],[4,4,4,4,4,4,4,]),'assignment':([0,2,27,35,49,50,67,],[5,5,5,5,5,5,5,]),'print_stmt':([0,2,27,35,49,50,67,],[6,6,6,6,6,6,6,]),'if_stmt':([0,2,27,35,49,50,67,],[7,7,7,7,7,7,7,]),'while_stmt':([0,2,27,35,49,50,67,],[8,8,8,8,8,8,8,]),'block':([0,2,27,35,49,50,67,],[9,9,9,9,9,9,9,]),'type':([0,2,27,35,49,50,67,],[10,10,10,10,10,10,10,]),'scope_enter':([15,],[27,]),'expression':([23,24,25,26,30,36,37,38,39,40,41,42,43,44,45,46,],[29,32,33,34,47,52,53,54,55,56,57,58,59,60,61,62,]),'scope_exit':([35,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',20),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',24),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',25),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement','parser.py',29),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','parser.py',30),
  ('statement -> print_stmt SEMICOLON','statement',2,'p_statement','parser.py',31),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',32),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',33),
  ('statement -> block','statement',1,'p_statement','parser.py',34),
  ('block -> LBRACE scope_enter statement_list scope_exit RBRACE','block',5,'p_block','parser.py',38),
  ('scope_enter -> <empty>','scope_enter',0,'p_scope_enter','parser.py',42),
  ('scope_exit -> <empty>','scope_exit',0,'p_scope_exit','parser.py',48),
  ('declaration -> type ID','declaration',2,'p_declaration','parser.py',55),
  ('type -> INT','type',1,'p_type','parser.py',63),
  ('type -> FLOAT','type',1,'p_type','parser.py',64),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',68),
  ('print_stmt -> PRINT LPAREN expression RPAREN','print_stmt',4,'p_print','parser.py',76),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',81),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',82),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',114),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',128),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',129),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',130),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',131),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',132),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','parser.py',140),
  ('expression -> expression LE expression','expression',3,'p_expression_relop','parser.py',141),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','parser.py',142),
  ('expression -> expression GE expression','expression',3,'p_expression_relop','parser.py',143),
  ('expression -> expression EQ expression','expression',3,'p_expression_relop','parser.py',144),
  ('expression -> expression NE expression','expression',3,'p_expression_relop','parser.py',145),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',151),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',155),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',159),
]
